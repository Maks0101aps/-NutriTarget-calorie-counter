{"ast":null,"code":"import create from 'zustand';\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nexport const useAuthStore = create(set => {\n  // Initialize state from localStorage if available\n  const token = localStorage.getItem('token');\n  const userStr = localStorage.getItem('user');\n  return {\n    user: userStr ? JSON.parse(userStr) : null,\n    token,\n    isAuthenticated: !!token,\n    isLoading: false,\n    error: null,\n    login: async (email, password) => {\n      try {\n        set({\n          isLoading: true,\n          error: null\n        });\n        const response = await axios.post(`${API_URL}/auth/login`, {\n          email,\n          password\n        });\n        const {\n          token,\n          user\n        } = response.data;\n\n        // Store in localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n\n        // Update state\n        set({\n          user,\n          token,\n          isAuthenticated: true,\n          isLoading: false\n        });\n      } catch (error) {\n        var _error$response, _error$response$data;\n        const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed';\n        set({\n          error: errorMessage,\n          isLoading: false\n        });\n      }\n    },\n    register: async (email, password, name) => {\n      try {\n        set({\n          isLoading: true,\n          error: null\n        });\n        const response = await axios.post(`${API_URL}/auth/register`, {\n          email,\n          password,\n          name\n        });\n        const {\n          token,\n          user\n        } = response.data;\n\n        // Store in localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n\n        // Update state\n        set({\n          user,\n          token,\n          isAuthenticated: true,\n          isLoading: false\n        });\n      } catch (error) {\n        var _error$response2, _error$response2$data;\n        const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed';\n        set({\n          error: errorMessage,\n          isLoading: false\n        });\n      }\n    },\n    logout: () => {\n      // Clear localStorage\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n\n      // Reset state\n      set({\n        user: null,\n        token: null,\n        isAuthenticated: false\n      });\n    },\n    clearError: () => {\n      set({\n        error: null\n      });\n    }\n  };\n});","map":{"version":3,"names":["create","axios","API_URL","process","env","REACT_APP_API_URL","useAuthStore","set","token","localStorage","getItem","userStr","user","JSON","parse","isAuthenticated","isLoading","error","login","email","password","response","post","data","setItem","stringify","_error$response","_error$response$data","errorMessage","message","register","name","_error$response2","_error$response2$data","logout","removeItem","clearError"],"sources":["/home/maksym/projects/-NutriTarget-calorie-counter/frontend/src/store/authStore.ts"],"sourcesContent":["import create from 'zustand';\nimport axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\ninterface User {\n  id: number;\n  email: string;\n  name?: string;\n}\n\ninterface AuthState {\n  user: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, name?: string) => Promise<void>;\n  logout: () => void;\n  clearError: () => void;\n}\n\nexport const useAuthStore = create<AuthState>((set) => {\n  // Initialize state from localStorage if available\n  const token = localStorage.getItem('token');\n  const userStr = localStorage.getItem('user');\n  \n  return {\n    user: userStr ? JSON.parse(userStr) : null,\n    token,\n    isAuthenticated: !!token,\n    isLoading: false,\n    error: null,\n    \n    login: async (email, password) => {\n      try {\n        set({ isLoading: true, error: null });\n        \n        const response = await axios.post(`${API_URL}/auth/login`, { \n          email, \n          password \n        });\n        \n        const { token, user } = response.data;\n        \n        // Store in localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        \n        // Update state\n        set({\n          user,\n          token,\n          isAuthenticated: true,\n          isLoading: false\n        });\n      } catch (error: any) {\n        const errorMessage = error.response?.data?.message || 'Login failed';\n        set({ error: errorMessage, isLoading: false });\n      }\n    },\n    \n    register: async (email, password, name) => {\n      try {\n        set({ isLoading: true, error: null });\n        \n        const response = await axios.post(`${API_URL}/auth/register`, { \n          email, \n          password,\n          name\n        });\n        \n        const { token, user } = response.data;\n        \n        // Store in localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        \n        // Update state\n        set({\n          user,\n          token,\n          isAuthenticated: true,\n          isLoading: false\n        });\n      } catch (error: any) {\n        const errorMessage = error.response?.data?.message || 'Registration failed';\n        set({ error: errorMessage, isLoading: false });\n      }\n    },\n    \n    logout: () => {\n      // Clear localStorage\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      \n      // Reset state\n      set({\n        user: null,\n        token: null,\n        isAuthenticated: false\n      });\n    },\n    \n    clearError: () => {\n      set({ error: null });\n    }\n  };\n}); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}